#!/bin/sh

_usage() {
  echo "Usage: $0 <domain>"
  echo "
check all mx hosts of the given domain for

 - reachability over ipv4 and ip6
 - support for starttls
 - support for TLS 1.2 and TLS 1.3
 - support for RSA and ECDSA certificates
 - whether the certificates are trusted
 - whether DANE data are available and valid

The program is expected to be run on a system capable to establish
outbound connection to port 25 over IPv4 and IPv4 and uses a validating
DNS resolver.

The following tools must be available in \$PATH:

 - awk
 - dig or kdig
 - ldns-dane
 - openssl
 - sed
 - sleep

It may be helpful to pipe the output though 'column -t'

Author: Andreas Schulze"
exit 1
}

_error() {
  echo >&2 'ERROR:' "$@"
  exit 1
}

# source: acme.sh
_exists() {
  cmd="$1"
  if [ -z "$cmd" ]; then
    _usage "Usage: _exists cmd"
    return 1
  fi

  if eval type type >/dev/null 2>&1; then
    eval type "$cmd" >/dev/null 2>&1
  elif command >/dev/null 2>&1; then
    command -v "$cmd" >/dev/null 2>&1
  else
    which "$cmd" >/dev/null 2>&1
  fi
  ret="$?"
  return $ret
}

check_all_flavours() {
  mxhost="$1"
  ip_protocol="$2"
  tls_protocol="$3"
  algo="$4"

  mxhost_without_dot="$( echo "${mxhost}" | sed -e "s/\.$//" )"

  case "${ip_protocol}" in
    4)
      mx_address_list="$( "${dig_cmd}" "${mxhost}" A +short 2>/dev/null | sort )"
      ;;
    6)
      mx_address_list="$( "${dig_cmd}" "${mxhost}" AAAA +short 2>/dev/null | sort )"
      ;;
    *)
      echo "FATAL: ip_protocol must be '4' or '6' but not '${ip_protocol}'"
      exit 1
      ;;
  esac

  # https://github.com/openssl/openssl/issues/10131
  case "${algo}" in
    rsa)
      sigalgs='RSA-PSS+SHA256:RSA+SHA256'
      ;;
    ecdsa)
      sigalgs='ECDSA+SHA256:ECDSA+SHA384'
      ;;
    *)
      echo "FATAL: algo must be 'rsa' or 'ecdsa' but not '${algo}'"
      exit 1
      ;;
  esac

  if [ -n "${mx_address_list}" ]; then
    for mx_address in ${mx_address_list}; do
      _tmp_s_client_output="$( mktemp --quiet )"
      pkix_result='unknown'
      reachable='unknown'
      starttls='unknown'
      # showcerts extract all certificates that may be checked using DANE later
      if (sleep 0.2; echo QUIT) | openssl s_client -connect "${mxhost_without_dot}":25 -starttls smtp -showcerts -"${2}" -"${3}" -sigalgs "${sigalgs}" > "${_tmp_s_client_output}" 2>&1; then
        reachable='yes'
        starttls='yes'
        if grep --silent 'Verify return code: 0 (ok)' < "${_tmp_s_client_output}"  2>/dev/null; then
          pkix_result='ok'
        else
          pkix_result='fail'
        fi
      else
        if ! grep --silent "Didn't find STARTTLS in server response" < "${_tmp_s_client_output}" 2>/dev/null; then
          reachable='no'
        else
          reachable='yes'
          starttls='no'
        fi
      fi

      dane_result='unknown'
      if [ 'yes' = "${starttls}" ]; then
        _tmp_cert_chain="$( mktemp --quiet )"
        # https://unix.stackexchange.com/questions/368123
        awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/{ print }' < "${_tmp_s_client_output}" > "${_tmp_cert_chain}" 2>/dev/null
        if [ -s "${_tmp_cert_chain}" ]; then
          mx_tlsa_data="$( "${dig_cmd}" _25._tcp."${mxhost}" TLSA +short 2>/dev/null )"
          if [ -n "${mx_tlsa_data}" ]; then
            if ldns-dane -c "${_tmp_cert_chain}" verify "${mxhost_without_dot}" 25 > /dev/null 2>&1; then
              dane_result='ok'
            else
              dane_result='fail'
            fi
          else
            dane_result='unavailable'
          fi
        fi
        rm -f "${_tmp_cert_chain}"
      fi
      rm -f "${_tmp_s_client_output}"

      printf 'mx=%s[%s] tls=%s algo=%s reachable=%s starttls=%s pkix=%s dane=%s\n' \
        "${mxhost_without_dot}" "${mx_address}" "${tls_protocol}" "${algo}" }
        "${reachable}" "${starttls}" "${pkix_result}" "${dane_result}"
    done
  else
    printf 'mx=%s[no_ipv%s] tls=%s algo=%s\n' "${mxhost_without_dot}" "${ip_protocol}" "${tls_protocol}" "${algo}"
  fi
}

main() {
  if [ -z         "${domain}" ] || \
     [ '-h'     = "${domain}" ] || \
     [ '-help'  = "${domain}" ] || \
     [ '--help' = "${domain}" ]; then
    _usage
  fi

  _exists 'awk'       || _error "awk is required"
  if _exists 'dig'; then
    dig_cmd='dig'
  elif _exists 'kdig'; then
      dig_cmd='kdig'
  else
    _error 'dig or kdig is required'
  fi
  _exists 'ldns-dane' || _error 'ldns-dane is required'
  _exists 'openssl'   || _error 'openssl is required'
  _exists 'sed'       || _error 'sed is required'
  _exists 'sleep'     || _error 'sleep is required'

  "${dig_cmd}" "${domain}." mx +short 2>/dev/null \
    | awk '{ print $2 }' \
    | while read -r _mxhost; do
        for ip_protocol in 4 6; do
          for tls_protocol in tls1_2 tls1_3; do
            for algo in rsa ecdsa; do
              check_all_flavours "${_mxhost}" "${ip_protocol}" "${tls_protocol}" "${algo}"
            done
          done
        done
      done
}

domain="${1}"
main "$@"
